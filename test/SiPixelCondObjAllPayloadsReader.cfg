process PixelDBReader = {

# MessageLogger
include "FWCore/MessageService/data/MessageLogger.cfi"

untracked PSet maxEvents = {untracked int32 input = 1}
   source = EmptySource {
	
	untracked uint32 firstRun = 1 
	untracked uint32 numberEventsInRun = 10
   }

   service = Timing {}
   service = SimpleMemoryCheck {
     untracked int32 ignoreTotal = 0 # default is one
   } 

  # Tracker SimGeometryXML
  include "Geometry/TrackerSimData/data/trackerSimGeometryXML.cfi"

  # Tracker Geometry Builder
  include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"

  # Tracker Numbering Builder
  include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"

  # SiPixelGainCalibrationService
  include "CondTools/SiPixel/data/SiPixelGainCalibrationService.cfi"

  include "CondCore/DBCommon/data/CondDBCommon.cfi"
  #
  # SQLIte
  #
  replace CondDBCommon.connect = "sqlite_file:prova.db"
  #
  # CMS_ORCOFF_INT2R
  #
  #replace CondDBCommon.connect = "oracle://cms_orcoff_int2r/CMS_COND_PIXEL"
  #
  replace CondDBCommon.timetype = "runnumber"
  replace CondDBCommon.DBParameters.messageLevel = 2
  replace CondDBCommon.DBParameters.authenticationPath= "/afs/cern.ch/cms/DB/conddb"
  #
  # Calibrations from DB
  #
  es_source = PoolDBESSource { 
    using CondDBCommon
    VPSet toGet = {
       { 
          string record = "SiPixelGainCalibrationRcd" 
          string tag = "GainCalibTestFull" 
       },
       { 
           string record = "SiPixelGainCalibrationForHLTRcd" 
           string tag = "GainCalibTestHLT" 
       },
       { 
          string record = "SiPixelGainCalibrationOfflineRcd" 
          string tag = "GainCalibTestOffline" 
       } 
    }
    untracked string BlobStreamerName="TBufferBlobStreamingService"
   }
  #
  # Calibrations from fake ESSource (generated at run-time)
  #
  include "CalibTracker/SiPixelESProducers/data/SiPixelFakeGainESSource.cfi"
  #
  # Choose which ES source you prefer...
  #
  #es_prefer = SiPixelFakeGainESSource{ }
  es_prefer = PoolDBESSource{ }
  #
  # Reader/Plotter
  #
   module  SiPixelCondObjAllPayloadsReader =  SiPixelCondObjAllPayloadsReader { 
	string fileName = "histos.root"
        string payloadType = "HLT"
	using SiPixelGainCalibrationServiceParameters
   }
  #
  # Path declaration
  #
   path p = { SiPixelCondObjAllPayloadsReader }
   module print = AsciiOutputModule {}
   endpath ep = { print }
}
